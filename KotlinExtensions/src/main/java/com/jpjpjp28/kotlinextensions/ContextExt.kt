package com.jpjpjp28.kotlinextensions

import android.content.Context
import android.content.Intent
import android.graphics.drawable.Drawable
import android.net.Uri
import android.view.View
import android.view.inputmethod.InputMethodManager
import androidx.annotation.ColorRes
import androidx.annotation.DrawableRes
import androidx.appcompat.content.res.AppCompatResources
import androidx.core.content.ContextCompat
import timber.log.Timber

/**
 * Created by john.custodio on 06/20/2020.
 */

/**
 * Make a standard toast that just contains a text view.
 *
 * @receiver Fragment
 * @param text The text to show.  Can be formatted text.
 * @return Unit
 */
fun Context.toast(text: String?) {
    if (text == null) return
    android.widget.Toast.makeText(this, text, android.widget.Toast.LENGTH_LONG).show()
}

/**
 * Returns a color associated with a particular resource ID
 * <p>
 * Starting in {@link android.os.Build.VERSION_CODES#M}, the returned
 * color will be styled for the specified Context's theme.
 *
 * @receiver Context
 * @param resId The desired resource identifier, as generated by the aapt
 *              tool. This integer encodes the package, type, and resource
 *              entry. The value 0 is an invalid identifier.
 * @return A single color value in the form 0xAARRGGBB.
 */
fun Context.getColorCompat(@ColorRes resId: Int): Int = ContextCompat.getColor(this, resId)

/**
 * Return a drawable object associated with a particular resource ID.
 *
 * <p>This method supports inflation of {@code <vector>} and {@code <animated-vector>}
 * resources on devices where platform support is not available.</p>
 *
 * @receiver Context
 * @param resId The desired resource identifier, as generated by the aapt
 *              tool. This integer encodes the package, type, and resource
 *              entry. The value 0 is an invalid identifier.
 * @return Drawable An object that can be used to draw this resource.
 */
fun Context.drawable(@DrawableRes resId: Int): Drawable? = AppCompatResources.getDrawable(this, resId)

/**
 * Open an asset using ACCESS_STREAMING mode.  This provides access to
 * files that have been bundled with an application as assets -- that is,
 * files placed in to the "assets" directory.
 *
 * @param fileName The name of the asset to open.  This name can be hierarchical.
 *
 * @see #open(String, int)
 * @see #list
 */
fun Context.openJsonFromAssets(fileName: String): String = this.assets.open(fileName).bufferedReader().use { it.readText() }

/**
 * Open the specified [url] to the default system browser.
 *
 * @receiver Context
 */
fun Context.openUrlInBrowser(url: String) {
    val intent = Intent(Intent.ACTION_VIEW)
    intent.data = Uri.parse(url)
    this.startActivity(intent)
}

/**
 * Synonym for {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}
 * without a result: request to hide the soft input window from the
 * context of the window that is currently accepting input.
 *
 * @receiver Context
 * @param caller View
 */
fun Context.hideKeyboard(caller: View) {
    caller.postDelayed({
        try {
            val imm = caller.context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            imm.hideSoftInputFromWindow(caller.windowToken, InputMethodManager.HIDE_NOT_ALWAYS)
        } catch (e: Exception) {
            Timber.e(e, "Could not hide keyboard. ")
        }
    }, 300)
}

/**
 * Synonym for {@link #showSoftInput(View, int, ResultReceiver)} without
 * a result receiver: explicitly request that the current input method's
 * soft input area be shown to the user, if needed.
 *
 * @receiver Context
 * @param caller View
 */
fun Context.showKeyboard(caller: View) {
    caller.postDelayed({
        val imm = caller.context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.showSoftInput(caller, InputMethodManager.SHOW_IMPLICIT)
    }, 100)
}